'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _pngjs = require('pngjs');

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _limitNumber = require('../utils/limit-number');

var _limitNumber2 = _interopRequireDefault(_limitNumber);

var _promisifiedFunctions = require('../utils/promisified-functions');

var _testRun = require('../errors/test-run/');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function readPng(filePath) {
    var png = new _pngjs.PNG();
    var parsedPromise = _pinkie2.default.race([(0, _promisifyEvent2.default)(png, 'parsed'), (0, _promisifyEvent2.default)(png, 'error')]);

    _fs2.default.createReadStream(filePath).pipe(png);

    return parsedPromise.then(function () {
        return png;
    });
}

function writePng(filePath, png) {
    var outStream = _fs2.default.createWriteStream(filePath);
    var finishPromise = _pinkie2.default.race([(0, _promisifyEvent2.default)(outStream, 'finish'), (0, _promisifyEvent2.default)(outStream, 'error')]);

    png.pack().pipe(outStream);

    return finishPromise;
}

exports.default = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(screenshotPath, markSeed, clientAreaDimensions, cropDimensions) {
        var mark, srcImage, markIndex, endPosition, right, bottom, left, top, width, height, dstImage, stride, i, srcStartIndex;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        mark = new Buffer(markSeed);
                        _context.next = 3;
                        return readPng(screenshotPath);

                    case 3:
                        srcImage = _context.sent;
                        markIndex = srcImage.data.indexOf(mark);

                        if (!(markIndex < 0)) {
                            _context.next = 7;
                            break;
                        }

                        return _context.abrupt('return', false);

                    case 7:
                        endPosition = markIndex / _constants.MARK_BYTES_PER_PIXEL + _constants.MARK_LENGTH + _constants.MARK_RIGHT_MARGIN;
                        right = endPosition % srcImage.width || srcImage.width;
                        bottom = (endPosition - right) / srcImage.width + 1;
                        left = right - clientAreaDimensions.width;
                        top = bottom - clientAreaDimensions.height;


                        if (cropDimensions) {
                            right = (0, _limitNumber2.default)(left + cropDimensions.right, left, right);
                            bottom = (0, _limitNumber2.default)(top + cropDimensions.bottom, top, bottom);
                            left = (0, _limitNumber2.default)(left + cropDimensions.left, left, right);
                            top = (0, _limitNumber2.default)(top + cropDimensions.top, top, bottom);
                        }

                        if (bottom - top >= clientAreaDimensions.height) bottom = top + clientAreaDimensions.height - 1;

                        width = right - left;
                        height = bottom - top;

                        if (!(width <= 0 || height <= 0)) {
                            _context.next = 20;
                            break;
                        }

                        _context.next = 19;
                        return (0, _promisifiedFunctions.deleteFile)(screenshotPath);

                    case 19:
                        throw new _testRun.InvalidElementScreenshotDimensionsError(width, height);

                    case 20:
                        dstImage = new _pngjs.PNG({ width: width, height: height });
                        stride = dstImage.width * _constants.MARK_BYTES_PER_PIXEL;


                        for (i = 0; i < height; i++) {
                            srcStartIndex = (srcImage.width * (i + top) + left) * _constants.MARK_BYTES_PER_PIXEL;


                            srcImage.data.copy(dstImage.data, stride * i, srcStartIndex, srcStartIndex + stride);
                        }

                        _context.next = 25;
                        return writePng(screenshotPath, dstImage);

                    case 25:
                        return _context.abrupt('return', true);

                    case 26:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function (_x, _x2, _x3, _x4) {
        return _ref.apply(this, arguments);
    };
}();

module.exports = exports['default'];